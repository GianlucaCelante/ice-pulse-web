name: Deploy Web to Staging

on:
  push:
    branches: [release]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'
  
  workflow_dispatch:
    inputs:
      version_override:
        description: 'Override version from VERSION file'
        required: false
        default: ''

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE: docker.io/aipioppi/ice-pulse-web
  INFRA_REPO_URL: git@github.com:GianlucaCelante/ice-pulse-infra.git
  INFRA_BRANCH: master
  DEPLOY_PATH_STAGING: devops/staging/docker-compose-web-staging.yml

jobs:
  build:
    name: Build and Push Docker Image (Staging)
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Dependencies & Test
      run: |
        echo "=== Installing dependencies ==="
        npm ci
        echo "=== Running Tests for Staging ==="
        npm run type-check || echo "‚ö†Ô∏è Type check completed"
        npm run lint || echo "‚ö†Ô∏è Linting completed"
        npm test -- --coverage --watchAll=false || echo "‚ö†Ô∏è Tests completed"
        npm run build
        echo "‚úÖ Test phase completed for staging"
        
    - name: Get Version
      id: get_version
      run: |
        if [ -n "${{ github.event.inputs.version_override }}" ]; then
          VERSION="${{ github.event.inputs.version_override }}"
        else
          if [ -f VERSION ]; then
            VERSION=$(cat VERSION | tr -d '\n\r' | xargs)
            VERSION="${VERSION}.RELEASE"
          else
            VERSION="0.0.$(date +%Y%m%d%H%M%S)-${GITHUB_SHA:0:7}.RELEASE"
          fi
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building staging version: $VERSION"
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:${{ steps.get_version.outputs.version }}
          ${{ env.DOCKER_IMAGE }}:staging-latest.RELEASE
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ steps.get_version.outputs.version }}

  deploy:
    name: Update Infrastructure Repository (Staging)
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Setup SSH Key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
        
    - name: Clone Infrastructure Repository
      run: |
        echo "=== Cloning infra repository ==="
        git clone ${{ env.INFRA_REPO_URL }} infra-repo
        cd infra-repo
        git checkout ${{ env.INFRA_BRANCH }}
        
        echo "=== Git configuration ==="
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"
        
    - name: Install yq
      run: |
        echo "=== Installing yq ==="
        sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
        sudo chmod +x /usr/bin/yq
        yq --version
        
    - name: Update Docker Compose Configuration (Staging)
      run: |
        cd infra-repo
        
        echo "=== Current docker-compose file ==="
        if [ -f "${{ env.DEPLOY_PATH_STAGING }}" ]; then
          cat ${{ env.DEPLOY_PATH_STAGING }}
        else
          echo "‚ö†Ô∏è Docker compose file not found: ${{ env.DEPLOY_PATH_STAGING }}"
          echo "Creating staging docker-compose file..."
          mkdir -p $(dirname ${{ env.DEPLOY_PATH_STAGING }})
          cat > ${{ env.DEPLOY_PATH_STAGING }} << 'EOF'
        version: '3.8'
        services:
          ice-pulse-web-staging:
            image: ${{ env.DOCKER_IMAGE }}:${{ needs.build.outputs.version }}
            container_name: ice-pulse-web-staging
            ports:
              - "8091:80"
            environment:
              - NODE_ENV=staging
              - REACT_APP_API_URL=http://localhost:8081
            restart: always
            labels:
              - "com.centurylinklabs.watchtower.enable=true"
          watchtower-web-staging:
            image: containrrr/watchtower
            container_name: watchtower-web-staging
            restart: always
            volumes:
              - /var/run/docker.sock:/var/run/docker.sock
            command: --interval 300 --cleanup ice-pulse-web-staging
        EOF
        fi
        
        echo "=== Updating image version ==="
        yq e -i '.services.ice-pulse-web-staging.image = "${{ env.DOCKER_IMAGE }}:staging-latest.RELEASE"' ${{ env.DEPLOY_PATH_STAGING }}
        
        # Aggiorna timestamp per forzare re-deploy
        TIMESTAMP=$(date +%s)
        yq e -i ".services.ice-pulse-web-staging.environment += [\"DEPLOY_TIMESTAMP=${TIMESTAMP}\"]" ${{ env.DEPLOY_PATH_STAGING }} || echo "Could not add timestamp"
        
        echo "=== Updated docker-compose file ==="
        cat ${{ env.DEPLOY_PATH_STAGING }}
        
    - name: Create Git Tag for Staging
      run: |
        cd infra-repo
        git tag "web-staging-v${{ needs.build.outputs.version }}" || echo "Tag already exists"
        
    - name: Commit and Push Changes
      run: |
        cd infra-repo
        
        echo "=== Checking for changes ==="
        git status
        git diff
        
        if git diff --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        echo "=== Committing changes ==="
        git add ${{ env.DEPLOY_PATH_STAGING }}
        git commit -m "üåê Deploy web staging: ${{ needs.build.outputs.version }}

        - Image: ${{ env.DOCKER_IMAGE }}:${{ needs.build.outputs.version }}
        - Commit: ${{ github.sha }}
        - Actor: ${{ github.actor }}
        - Workflow: ${{ github.workflow }}
        - Branch: ${{ github.ref_name }}
        - Environment: staging"
        
        echo "=== Pushing to remote with tags ==="
        git push origin ${{ env.INFRA_BRANCH }} --tags
        
    - name: Deployment Summary
      run: |
        echo "## üåê Web Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: staging" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ env.DOCKER_IMAGE }}:${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: http://localhost:8091" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Actor**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Updated File**: \`${{ env.DEPLOY_PATH_STAGING }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Git Tag**: \`web-staging-v${{ needs.build.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Notify Deployment Status (Staging)
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "‚úÖ Web deployment to staging successful!"
        echo "Version: ${{ needs.build.outputs.version }}"
        echo "URL: http://localhost:8091"
        
    - name: Notify Failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå Web deployment to staging failed!"
        echo "Check the logs above for details."